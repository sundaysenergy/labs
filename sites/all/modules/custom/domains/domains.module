<?php

/**
 * @file
 * 
 * @TODO: Views integration, use it for page /domain
 * @TODO: Schema: rename domain to domains_domain (domain module may used this)
 */
define('DOMAINS_ADMIN_URL', 'admin/config/domains');

module_load_include('inc', 'domains');
module_load_include('inc', 'domains', 'domains.dns');

/**
 * Implements hook_menu()
 */
function domains_menu() {
  $items['admin/config/domains'] = array(
    'title' => 'Domain',
    'description' => 'Manage domain',
    'page callback' => 'domain_info_page_callback',
    'file' => 'domains.admin.inc',
    'access arguments' => array('administer domains'),
  );

  $items['admin/config/domains/manage'] = array(
    'title' => 'Domain Entity',
    'description' => 'Manage domain entity',
    'file' => 'domains.admin.inc',
    'page callback' => 'domain_info_page_callback',
    'access arguments' => array('administer domains'),
  );

  $items['admin/config/domains/providers'] = array(
    'title' => 'Providers',
    'description' => 'Manage domain providers',
    'page callback' => 'domains_admin_providers',
    'access arguments' => array('administer domain providers'),
    'file' => 'domains.admin.inc',
  );

  $items['admin/config/domains/providers/%/config'] = array(
    'title' => 'Configure provider',
    'page callback' => 'domains_admin_provider_config',
    'page arguments' => array(4),
    'access arguments' => array('administer domain providers'),
    'file' => 'domains.admin.inc',
    'type' => MENU_CALLBACK
  );

  $items['domain/%domains_domain'] = array(
    'title callback' => 'domains_domain_page_title',
    'title arguments' => array(1),
    'file' => 'domains.pages.inc',
    'page callback' => 'domains_domain_page_view',
    'page arguments' => array(1),
    'access arguments' => array('view domains'),
  );
  $items['domain/%domains_domain/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['domain/%domains_domain/whois'] = array(
    'title' => 'Whois',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_whois_form', 1),
    'access arguments' => array('view whois'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['domain/%domains_domain/renew'] = array(
    'title' => 'Renew',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_renew_form', 1),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
  );
  $items['domain/%domains_domain/dns'] = array(
    'title' => 'DNS',
    'file' => 'domains.pages_dns.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_domain_dns_form', 1),
    'access arguments' => array('edit domain dns'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['domain/%domains_domain/dns/nameserver'] = array(
    'title' => 'Nameservers',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['domain/%domains_domain/dns/records'] = array(
    'title' => 'Records',
    'file' => 'domains.pages_dns.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_domain_dns_records_form', 1),
    'access arguments' => array('edit domain dns'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['domain/%domains_domain/delete'] = array(
    'title' => 'Delete',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_domain_delete_confirm', 1),
    'access arguments' => array('delete domain'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['domain/add'] = array(
    'title' => 'Add domain',
    'file' => 'domains.pages.inc',
    'page callback' => 'domains_domain_add_callback',
    'access arguments' => array('create domain'),
  );

  $items['domain/import'] = array(
    'title' => 'Import Your Domains',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_domain_import_form'),
    'access arguments' => array('administer domains'),
  );
  $items['domain/import/process'] = array(
    'title' => 'Import Your Domains',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_domain_import_process_form'),
    'access arguments' => array('administer domains'),
    'type' => MENU_CALLBACK,
  );

  // Submit a form without a page reload.
  $items['domain/register'] = array(
    'title' => 'Register A Domain',
    'file' => 'domains.pages.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('domains_register_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  // batch process checked domains for registration form
  $items['domain/register/process'] = array(
    'title' => 'Register A Domain',
    'file' => 'domains.pages.inc',
    'page callback' => 'domains_register_process_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function domains_permission() {
  return array(
    'administer domains' => array(
      'title' => t('Administer domains'),
      'description' => 'Perform administration tasks for domain entity.',
    ),
    'administer domain providers' => array(
      'title' => t('Administer domain providers'),
      'description' => t('Perform administration tasks for domain provider.'),
    ),
    'view domains' => array(
      'title' => t('View Domains'),
    ),
    'add domain' => array(
      'title' => t('Add domain'),
    ),
    'register domain' => array(
      'title' => t('Register new domain'),
    ),
    'edit domain dns' => array(
      'title' => t('Edit domain DNS'),
    ),
    'delete domain' => array(
      'title' => t('Delete domain'),
    ),
		'view whois' => array(
      'title' => t('View whois'),
    ),
  );
}

/**
 * Implements hook_theme
 */
function domains_theme() {
  return array(
    'domains_result_list' => array(
      'variables' => array('results' => NULL),
      'file' => 'domains.theme.inc',
    ),
    'domains_dns_records_form' => array(
      'render element' => 'element',
      'file' => 'domains.theme.inc',
    ),
  );
}

/**
 * Implements hook_entity_info()
 */
function domains_entity_info() {
  $info['domains_domain'] = array(
    'label' => t('Domain'),
    'entity class' => 'DomainEntity',
    'controller class' => 'DomainEntityController',
    'metadata controller class' => '',
    'base table' => 'domain',
    'module' => 'domain',
    'uri callback' => 'domains_domain_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'static cache' => TRUE,
    'bundles' => array(
      'domain' => array(
        'label' => 'Domain',
        'admin' => array(
          'path' => 'admin/config/domains/manage',
          'access arguments' => array('administer domains'),
        ),
      ),
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Full content'),
        'custom settings' => FALSE,
      ),
    )
  );

  return $info;
}

/**
 * Implements hook_field_extra_fields()
 */
function domains_field_extra_fields() {
  $return['domains_domain']['domain'] = array(
    'form' => array(
      'name' => array(
        'label' => t('Domain Name'),
        'description' => t('Unique domain name across system.'),
        'weight' => -5,
      ),
      'expiration' => array(
        'label' => t('Expiration Time'),
        'description' => t('Domain expiration time in GMT.'),
        'weight' => -4
      ),
    ),
    'display' => array(
      'name' => array(
        'label' => t('Domain Name'),
        'description' => t('Unique domain name across system.'),
        'weight' => -5,
      ),
      'expiration' => array(
        'label' => t('Expiration Time'),
        'description' => t('Domain expiration time in GMT.'),
        'weight' => -4
      ),
    ),
  );

  return $return;
}

/**
 * URI callback for domain Entity.
 */
function domains_domain_uri($domain) {
  return array(
    'path' => 'domain/' . $domain->id,
  );
}

/**
 * Load domain entity
 */
function domains_domain_load($did = NULL, $reset = FALSE) {
  $dids = (isset($did) ? array($did) : array());
  $domains = domains_domain_load_multiple($dids, array(), $reset);
  return $domains ? reset($domains) : FALSE;
}

function domains_domain_load_multiple($dids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('domains_domain', $dids, $conditions, $reset);
}

/**
 * Load domain by its name
 */
function domains_domain_load_by_name($name, $reset = FALSE) {
  $domains = domains_domain_load_multiple(NULL, array('name' => $name), $reset);
  return $domains ? reset($domains) : FALSE;
}

/**
 * API function to save domain entity.
 * 
 * @param object $domain Domain entity to save.
 * @return object Saved domain entity.
 */
function domains_domain_save(&$domain) {
  return entity_get_controller('domains_domain')->save($domain);
}

/**
 * Callback to return title of domain entity.
 * 
 * @param object $domain 
 * @return string
 */
function domains_domain_page_title($domain) {
  return check_plain($domain->name);
}

/**
 * Callback for getting domain properties.
 */
function domains_domain_get_properties($domain, array $options, $name) {
  switch ($name) {
    case 'creator':
      return $domain->uid;
  }
}

/**
 * Call back for setting properties of domain
 */
function domains_domain_set_properties($domain, $name, $value) {
  switch ($name) {
    case 'creator':
      $domain->uid = $value;
      break;
  }
}

function _domains_domain_inport_process($domain_name, $provider_name, &$context) {
  global $user;
  $provider = domains_get_provider($provider_name);
  $info = $provider->query($domain_name);

  $values = array(
    'name' => $domain_name,
    'uid' => $user->uid,
    'expiration' => $info['expiration'],
    'controller' => $provider_name,
    'dns_provder' => 'custom',
  );
  // Save entity
  $domain = entity_create('domains_domain', $values);
  $domain->save();

  $context['results'][] = check_plain($domain->name);
  $context['message'] = t('Import domain @name', array('@name' => $domain->name));
}

function domains_domain_inport_process_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $message = count($results) . ' domain inported.';
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing ' . $error_operation[0] . ' with arguments :' . print_r($error_operation[0], TRUE);
  }
  drupal_set_message($message);
}

/**
 * Delete domain by domain id
 * 
 * @param type $did 
 */
function domains_domain_delete($did) {
  domains_domain_delete_multiple(array($did));
}

/**
 * Delete domain by multi domain id
 * 
 * @param type $dids 
 */
function domains_domain_delete_multiple($dids) {
  $transaction = db_transaction();
  if (!empty($dids)) {
    $domains = domains_domain_load_multiple($dids, array());

    try {
      foreach ($domains as $did => $domain) {
        module_invoke_all('entity_delete', $domain, 'domains_domain');
        field_attach_delete('domains_domain', $domain);

        //Delete all domain from array id after call some hook
        db_delete('domain')
                ->condition('id', $dids, 'IN')
                ->execute();
      }
    } catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('domains_domain', $e);
      throw $e;
    }
    // Clear the page and block and node_load_multiple caches.
    entity_get_controller('domains_domain')->resetCache();
  }
}